#!/bin/sh
#library for pfs-utils, by betcher, GPL v3.
#VERSION 2.0

PFSDIR=/etc/packages
TMPFSLIMIT=100000

copyramdir="/tmp/.mountRAM"
prefixmp="/mnt/."
changesDir="/mnt/live/memory/changes/"

if [ -f /etc/initvars ] ; then
        . /etc/initvars
        [ "$SYSMNT" ] || SYSMNT=$(cut -f2 -d/ /sys/fs/aufs/si_*/br0)
        copyramdir=${SYSMNT}/copy2ram/
        prefixmp=${SYSMNT}/bundles/
        changesDir=${SYSMNT}/changes/
fi

function checkramfreeb () {
	local free  
if [[ -x $(which checkramfree) ]] ; then
	echo $(checkramfree) 
else
   free=$(expr $(df $copyramdir -B 1024 |grep tmpfs |awk '{print $4}') -  $TMPFSLIMIT)
   echo $free
fi 2>/dev/null
}


function allow_only_root()
{
    if [ "0$UID" -ne 0 ]; then
        echo "Only root can run" "$(basename $0)"; exit 1
    fi
}

function checksfsxzb () {
grep squashfs /proc/filesystems || return 1
grep aufs /proc/filesystems     || return 1
#check xz
kerneluname="$(uname -r)"
kernel1ver="$(echo -n "${kerneluname}" | cut -f 1 -d '.' | cut -f 1 -d '-')"
if [ ${kernel1ver} -lt 3 ];then
  kernel2ver="$(echo -n "${kerneluname}" | cut -f 2 -d '.' | cut -f 1 -d '-')"
  if [ ${kernel2ver} -lt 6 ];then
    return 1
  else
    kernel3ver="$(echo -n "${kerneluname}" | cut -f 3 -d '.' | cut -f 1 -d '-')"
    if [ ${kernel3ver} -lt 38 ]; then
      return 1
    fi
  fi
fi
return 0
}

function disktypeb () {
if disktype $1 2>/dev/null ; then 
	return 0
else
	ftest=$(file $1)
	if $(echo $ftest |egrep -qi cannot.*open) ; then
		echo $ftest
		return 1
	elif $(echo $ftest |egrep -qi block.*special) ;then
		echo $(blkid -s TYPE $1)
		return 0
	else 
		echo $ftest
		return 0
	fi
fi
}

function fs_type () {
diskinfo="$(disktypeb "$1" 2>/dev/null)"
if echo "${diskinfo}" | grep -qi -F "Ext2" ;then
  echo 'ext2'
elif echo "${diskinfo}" | grep -qi -F "Ext3" ;then
  echo 'ext3'
elif echo "${diskinfo}" | grep -qi -F "Ext4" ;then
  echo 'ext4'
elif echo "${diskinfo}" | grep -qi -F "squashfs" ;then
  echo 'squashfs'
elif echo "${diskinfo}" | grep  -qi "ISO.*9660" ;then
  echo 'iso9660'
fi
}


function lddcheck () {
	local rootdir alllibs
[ "${1}" != "" ] && rootdir="${1}" || rootdir="./"
if [ ! -d "${rootdir}" ]; then
  echo "Directory \"${rootdir}\" not found!" >&2; exit 1
fi
alllibs="$(find "${rootdir}" ! -type d -name "*.so*")" 
find "${rootdir}" -type f -executable | while read chfile; do [ "$(file --brief "${chfile}" | grep -E "LSB executable|shared object")" ] && ldd "${chfile}" 2>/dev/null; done | grep -E '\.so$|\.so\.[0-9]' | sed 's/(..........)/()/' | sort -u | sed 's/[ \t]*//;s/.* =>  ()//;s/ => .*$//;s/ ()//' | while read exlib; do echo "${alllibs}" | grep -q -F "${exlib}" || echo "${exlib}"; done | grep -v -F "linux-gate.so" | sort -uf
return 0
}

function losetupb () {
	if [ -x "$(which losetup-FULL)" ]; then
  losetup-FULL $@
elif   [ -x "$(which losetup)" ] ; then
	losetup $@ || exit 1
fi 2>/dev/null
return $?
}

function mountb () {
if [ -x "$(which busybox)" ]; then
  if busybox --list | grep -q -F mount; then
    busybox mount $@
  else
    [ -x "$(which mount)" ] && mount $@ || return 1
  fi
else
  [ -x "$(which mount)" ] && mount $@ || return 1
fi
return $?
}

function umountb () {
if [ -x "$(which busybox)" ]; then
  if busybox --list | grep -q -F umount; then
    busybox umount $@
  else
    [ -x "$(which umount)" ] && umount $@ || return 1
  fi
else
  [ -x "$(which umount)" ] && umount $@ || return 1
fi
return $?
}
