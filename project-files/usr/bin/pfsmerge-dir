#!/bin/sh
#Merge dir -> .pfs , by sfs, GPL v3
#VERSION 3.1
. /usr/bin/pfsfunc

HLP(){
echo "Usage: $0 <list of sources> -o out.pfs"
echo "Examples:"
echo "$0 ./dir 			-make dir.pfs from dir"
echo "$0 1.pfs 2.pfs -o 3.pfs	-collect 1.pfs and 2.pfs to contaner 3.pfs"
echo "$0 * -o ./big.pfs		-collect all dirs and squashfs modules from current dir to big.pfs" 
exit 1
}
[ $1 ] || HLP
allow_only_root


checksfsxzb >/dev/null 2>&1
if [ $? -gt 0 ]; then
  exitmsg "Kernel not support PFS!" 1
fi


argslist="$@"
if  echo $argslist |grep -q "\-*comp .*" ; then
	compression="$(echo $@ |sed 's/^.*\-*comp//')"
	argslist="$(echo $@ |sed 's/\-*comp.*$//')"
fi

sourcelist=""
for arg in $argslist
do
  case "${arg}" in
    "-o" | "--out-file") onuserout="on";;
    "-h" | "--help")  HLP ;exit 1;;
    "-p" | "--name" | "--name-pack" | "--name-package") usepkname="on";;
    #"-n" | "--no-dirs-empty") dirs="off";;
    #"-m" | "--md5") md5cr="on";;
    #"-e" | "--empty" | "--no-md5") ;;
    "-no-progress" | "--no-progress") noprogress="-no-progress";;
    "-processors" | "--processors" ) numproc="on";;
    "-f" | "--fast" | "-g" ) [ "$compression_fast" ] && compression="$compression_fast" || compression="gzip";;
    "-"*[A-Za-z]*) echo "$(basename "$0"): invalid option -- '$(echo ${arg} | tr -d '-')'" >&2; HLP; exit 1;;
    *) if [ "${usepkname}" = "on" ]; then packname="${arg}"
       elif [ "${onuserout}" = "on" ]; then userout="${arg}"
       elif [ "${numproc}" = "on" ]; then useproc="-processors ${arg}"
       else sourcelist="${sourcelist} ${arg}"; fi
       onuserout="off"; usepkname="off"; usindlib="off"; numproc="off";;
  esac
done

[ "${packname}" != "" ] && pfsname="${packname}" || pfsname="$(basename "${pfsdir}")"
echo "${pfsname}"

for source in $sourcelist ;do
	[ -d $source ] && continue
	[ "$(fs_type $source)" == "squashfs" ] && continue
	exitmsg "Type of source \"$source\" is not correct" 2
done	

n="$(mkaufs || exitmsg "mkaufs error" 2)"
nn="$(echo "$n" | sed -n 's/^.*\([0-9]\)$/\1/p')"
[ "$(echo "$n" |egrep '/aufs[1-9]$')" ] || exitmsg "error mounting aufs" 3


for  i in $sourcelist ;do
    mkmeta "$i" "$n"  && addlayer "$nn" "$i" || exitmsg "can't insert layer to aufs" 5
done 

[ "${userout}" = "" ] && userout="./$(basename $(echo $sourcelist | awk '{print $1}')).pfs"

mksquashfs "${n}" "${userout}" -comp ${compression} -noappend ${noprogress} ${useproc}
	exitmsg "error create squashfs module" $?
delaufs "$nn"
	exitmsg "delaufs error" $?
