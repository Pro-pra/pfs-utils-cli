#!/bin/sh
#library for pfs-utils, GPL v3.
#Author: Zay, pappyrus.org
#Author: DdShurick, pappyrus.org
#Author: Sfs, pappyrus.org
#Author: Betcher, magos-linux.ru
#VERSION 3.0

PFSDIR=/etc/packages
TMPFSLIMIT=100000

copyramdir="/tmp/.mountRAM"
prefixmp="/mnt/."
changesDir="/mnt/live/memory/changes/"
compression_fast="lz4"

if [ -f /etc/initvars ] ; then
        . /etc/initvars
        [ "$SYSMNT" ] || SYSMNT=$(cut -f2 -d/ /sys/fs/aufs/si_*/br0 | head -n1)
        copyramdir=${SYSMNT}/copy2ram/
        prefixmp=${SYSMNT}/bundles/
        changesDir=${SYSMNT}/changes/
fi


function mkaufs () {
N=$(ls /sys/fs/aufs/ | wc -w) 
if [ $# = 0 ]; then
	mkdir $SYSMNT/changes$N
	mount -t tmpfs tmpfs $SYSMNT/changes$N
elif [ $# = 2 ]; then
	MNTPT="$(grep $1 /proc/mounts | awk '{print $2}')" 
	[ "$(grep $1 /proc/partitions | wc -l)" = 1 ] || return 1 
	[ "$(blkid /dev/$1 | grep ext)" ] || return 2
	if [ "$MNTPT" = "" ]; then
		MNTPT=/mnt/$1
		mkdir $MNTPT
		mount /dev/$1 $MNTPT
	fi
	mkdir $MNTPT/$2
	ln -s $MNTPT/$2 /$SYSMNT/changes$N
fi
mkdir /$SYSMNT/aufs$N
mount -t aufs -o dirs=$SYSMNT/changes$N/=rw aufs $SYSMNT/aufs$N && echo $N
}

function delaufs () {
N=$(ls /sys/fs/aufs/ | wc -w) 
[ "$1" -gt 0 -a "$N" -gt "$1" ] || return 1

umount $SYSMNT/aufs$1
rmdir $SYSMNT/aufs$1

if [ "$(grep changes$1 /proc/mounts)" ]; then
	umount -d /$SYSMNT/changes$1
	rmdir /$SYSMNT/changes$1
else
	rm /$SYSMNT/changes$1
fi
if [ -d /$SYSMNT/bundles$1 ]; then
	ls -1 /$SYSMNT/bundles$1 | while read D
	do
		umount -d /$SYSMNT/bundles$1/$D
		rmdir /$SYSMNT/bundles$1/$D
	done
	 rmdir /$SYSMNT/bundles$1
fi
}

function addlayer () {
case "$1" in
	0) AUFSMNT="/"; shift;;
	[1-9]) N=$1
		if [ $N -le $(ls -d /sys/fs/aufs/si_* | wc -w) ]; then
			AUFSMNT=$SYSMNT/aufs$N
			shift
		else
			return 1
		fi
	;;
	*) AUFSMNT="/" ;;
esac

NEWLAYER=$(realpath "$1") || return 2
[ "$(grep aufs$N /proc/mounts)" ] || return 3
MODNAME=$(basename "$NEWLAYER")
NAME=$(echo $MODNAME | sed 's/\....$//')

case $(file -b $NEWLAYER) in
	*directory) MODTYPE="dir" ;;
	Squashfs*4.0*|Linux*ext*)
		if [ "$(grep $NAME /proc/mounts)" ]; then #if the module is already mounted
			NEWLAYER="$(grep $NAME /sys/fs/aufs/si_*/br[1-9]* | cut -f2 -d:| cut -f1 -d=)"
		else
			mkdir -p /$SYSMNT/bundles$N/"$MODNAME"
			mount -o loop "$NEWLAYER" /$SYSMNT/bundles$N/"$MODNAME"
			NEWLAYER=/$SYSMNT/bundles$N/"$MODNAME"
		fi
	;;
	"") return 4 ;;
	*) return 6 ;;
esac
lay=1
[ $2 ] && lay=$2
mount -o remount,add:$lay:"$NEWLAYER" $AUFSMNT
#[ "$AUFSMNT" = "/" ] || echo "aufs смонтирована в $AUFSMNT, сохранение изменений /$SYSMNT/changes$N"
}

function checkramfreeb () {
	local free  
if [[ -x $(which checkramfree) ]] ; then
	echo $(checkramfree) 
else
   free=$(expr $(df $copyramdir -B 1024 |grep tmpfs |awk '{print $4}') -  $TMPFSLIMIT)
   echo $free
fi 2>/dev/null
}


function allow_only_root()
{
    if [ "0$UID" -ne 0 ]; then
        echo "Only root can run" "$(basename $0)"; exit 1
    fi
}

function checksfsxzb () {
grep squashfs /proc/filesystems || return 1
grep aufs /proc/filesystems     || return 1
#check xz
kerneluname="$(uname -r)"
kernel1ver="$(echo -n "${kerneluname}" | cut -f 1 -d '.' | cut -f 1 -d '-')"
if [ ${kernel1ver} -lt 3 ];then
  kernel2ver="$(echo -n "${kerneluname}" | cut -f 2 -d '.' | cut -f 1 -d '-')"
  if [ ${kernel2ver} -lt 6 ];then
    return 1
  else
    kernel3ver="$(echo -n "${kerneluname}" | cut -f 3 -d '.' | cut -f 1 -d '-')"
    if [ ${kernel3ver} -lt 38 ]; then
      return 1
    fi
  fi
fi
return 0
}

function disktypeb () {
if disktype $1 2>/dev/null ; then 
	return 0
else
	ftest=$(file $1)
	if $(echo $ftest |egrep -qi cannot.*open) ; then
		echo $ftest
		return 1
	elif $(echo $ftest |egrep -qi block.*special) ;then
		echo $(blkid -s TYPE $1)
		return 0
	else 
		echo $ftest
		return 0
	fi
fi
}

function fs_type () {
diskinfo="$(disktypeb "$1" 2>/dev/null)"
if echo "${diskinfo}" | grep -qi -F "Ext2" ;then
  echo 'ext2'
elif echo "${diskinfo}" | grep -qi -F "Ext3" ;then
  echo 'ext3'
elif echo "${diskinfo}" | grep -qi -F "Ext4" ;then
  echo 'ext4'
elif echo "${diskinfo}" | grep -qi -F "squashfs" ;then
  echo 'squashfs'
elif echo "${diskinfo}" | grep  -qi "ISO.*9660" ;then
  echo 'iso9660'
fi
}


function lddcheck () {
	local rootdir alllibs
[ "${1}" != "" ] && rootdir="${1}" || rootdir="./"
if [ ! -d "${rootdir}" ]; then
  echo "Directory \"${rootdir}\" not found!" >&2; exit 1
fi
alllibs="$(find "${rootdir}" ! -type d -name "*.so*")" 
find "${rootdir}" -type f -executable | while read chfile; do [ "$(file --brief "${chfile}" | grep -E "LSB executable|shared object")" ] && ldd "${chfile}" 2>/dev/null; done | grep -E '\.so$|\.so\.[0-9]' | sed 's/(..........)/()/' | sort -u | sed 's/[ \t]*//;s/.* =>  ()//;s/ => .*$//;s/ ()//' | while read exlib; do echo "${alllibs}" | grep -q -F "${exlib}" || echo "${exlib}"; done | grep -v -F "linux-gate.so" | sort -uf
return 0
}

function losetupb () {
	if [ -x "$(which losetup-FULL)" ]; then
  losetup-FULL $@
elif   [ -x "$(which losetup)" ] ; then
	losetup $@ || exit 1
fi 2>/dev/null
return $?
}

function mountb () {
if [ -x "$(which busybox)" ]; then
  if busybox --list | grep -q -F mount; then
    busybox mount $@
  else
    [ -x "$(which mount)" ] && mount $@ || return 1
  fi
else
  [ -x "$(which mount)" ] && mount $@ || return 1
fi
return $?
}

function umountb () {
if [ -x "$(which busybox)" ]; then
  if busybox --list | grep -q -F umount; then
    busybox umount $@
  else
    [ -x "$(which umount)" ] && umount $@ || return 1
  fi
else
  [ -x "$(which umount)" ] && umount $@ || return 1
fi
return $?
}

if [ "$(basename $0)" == "pfsfunc" ] ;then
[ $1 ] || exit 1
command="$1" 
shift
$command $@
fi 

