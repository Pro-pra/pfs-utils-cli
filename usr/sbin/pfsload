#!/bin/sh
#Mount filesystem to AUFS (for PuppyRus), by Zay, GPL v3.
#Version 0.21
#Modify 26.04.2015

hide="."
mountdir_default="/mnt"
copyramdir_default="/tmp/.mountRAM"
minfreespace=131072
unset infile fupdate romode copy2ram mountdir copyramdir

for arg in "$@"
do
  case "${arg}" in
    "-u" | "--upper") mntmode="upper";;
    "-l" | "--lower") mntmode="lower";;
    "-n" | "--no-update") fupdate="no";;
    "-r" | "--read-only") romode="yes";;
    "-h" | "--help") infile=""; break;;
    "--nh"|"--no-hide") hide="";;
    "-m" | "--memory") copy2ram="yes";;
    "-"*[A-Za-z]*) echo "$(basename "$0"): invalid option -- '$(echo ${arg} | tr -d '-')'" >&2; exit 1;;
    *) [ -z "$infile" ] && infile="${arg}" \
	|| { [ -z "$mountdir" ] && mountdir="${arg}" \
	      || copyramdir="${arg}"
	    };;
  esac
done
[ "$mountdir" ] || mountdir="$mountdir_default"
[ "$copyramdir" ] || copyramdir="$copyramdir_default"

if [ "${infile}" = "" ]; then
  echo "Usage: $(basename "$0") [OPTIONS] FILESYSTEM [MOUNTDIR [COPYRAMDIR]]"
  echo "${IFS}Options:"
  echo " -u, --upper     Mount filesystem to upper layer (AUFS)."
  echo " -l, --lower     Mount filesystem to lower layer (AUFS)."
  echo " -r, --read-only Mount read-only"
  echo " -n, --no-update Do not check for update caches"
  echo " --nh, --no-hide Do not hide mountpoint in mount dir"
  echo " -m, --memory    Copy to RAM"
  exit
fi

fsfile="$(realpath "${infile}")"
if [ -f "${infile}" ]; then
  devtype="file"
elif [ -b "${infile}" ]; then
  devtype="dev"
elif [ -d "${infile}" ]; then
  devtype="dir"
else
  echo "Object \"${infile}\" not found!" >&2; exit 1
fi

if [ "${devtype}" != "dir" ]; then
  diskinfo="$(disktype "${fsfile}" 2>/dev/null)"
  fstype=$( echo "${diskinfo}" \
            |tr [:upper:] [:lower:] \
            |grep -oE "squashfs|ext[2-4]" )
else
  fsinfo="$(df -aT "${fsfile}" | tail -n 1 | tr -s ' ' '_' | cut -d'_' -f 2)"
  case "${fsinfo}" in
    "ext2"|"ext3"|"ext4"|"squashfs"|"tmpfs") fstype="${fsinfo}";;
  esac
fi
[ "${fstype}" = "" ] && echo "Filesystem not supported!" >&2 && exit 1

fsname="$(basename "${fsfile}")"
mountpoint="${mountdir}/${hide}${fsname}"
[ -d "${mountpoint}" ] && rmdir "${mountpoint}" 2>/dev/null
[ -d "${mountpoint}" ] && echo "Object \"${fsfile}\" is mounted!" >&2 && exit 1

if [ "$copy2ram" -a "$devtype" != "dev" ] \
    && { [ -d "$copyramdir" ] || mkdir -p "$copyramdir"; } ; then
  filesize=$(du -sk "$fsfile" | cut -f1)
  freeram="$(checkramfree 2>/dev/null)" \
   || freeram="$(free | grep 'Mem:' | tr -s ' ' | cut -d ' ' -f 4)"
  if [ "$copyramdir" == "$copyramdir_default" ] \
      && ! grep -q "$copyramdir" /proc/self/mounts ; then
    diskspace=$(expr $freeram - $minfreespace)
    [ $diskspace -gt $filesize ] \
      && mountb -t tmpfs tmpfs "$copyramdir" \
      || diskspace=0
  else
    diskspace=$(df -aT "$copyramdir" | tail -n 1 | tr -s ' ' | cut -d' ' -f5)
  fi
  [ $diskspace -gt $filesize ] \
   && [ $(expr $freeram - $minfreespace) -gt $filesize ] \
   && cp -a "$fsfile" "$copyramdir" \
   && fsfile="$copyramdir/$fsname" \
   || { echo "No space for copy2ram. $fsfile not loaded." >&2
        grep -q "$copyramdir" /proc/self/mounts \
         && [ -z "$(ls -A "$copyramdir")" ] \
         && umountb "$copyramdir"
        exit 1
      }
fi

mkdir -p "${mountpoint}"
case "${devtype}" in
   "file" )   [ "${romode}" -o "${fstype}" == "squashfs" ] \
		&& optmnt="loop,ro" || optmnt="loop"
	      mountb -t ${fstype} -o ${optmnt} "${fsfile}" "${mountpoint}" ;;
    "dev" )   [ "${romode}" ] && optmnt="ro" || optmnt="rw"
              mountb -t ${fstype} -o ${optmnt} "${fsfile}" "${mountpoint}" ;;
    "dir" )   rmdir "${mountpoint}" ; mountpoint="${fsfile}" ;;
esac
if [ $? -ne 0 ] ; then
    echo "Unable to mount \"${fsfile}\" in \"${mountpoint}\"." >&2
    [ "$fsfile" == "$copyramdir/$fsname" ] && rm -rf "$fsfile"
    exit 1
fi

[ "${romode}" -o "${fstype}" == "squashfs" ] && optmnt="=rr+wh" || optmnt="=ro+wh"
if [ "${mntmode}" != "lower" ]; then
    aufslayer="$(topaufslayer 2>/dev/null)"
    case "${aufslayer}" in
      ''|*[!0-9]*) aufslayer=1;;
    esac
    mountb -o remount,add:${aufslayer}:"${mountpoint}${optmnt}" /
else
    mountb -o remount,append:"${mountpoint}${optmnt}" /
fi
if [ $? -ne 0 ]; then
    [ "${devtype}" != "dir" ]  && { umountb -d "${mountpoint}"
                                    rmdir "${mountpoint}"
                                   }
    [ "$fsfile" == "$copyramdir/$fsname" ] && rm -rf "$fsfile"
    echo "AUFS error!" >&2
    exit 1
fi

if [ "${fupdate}" != "no" ]; then
    pfs-update-caches "${mountpoint}"
fi
exit 0
